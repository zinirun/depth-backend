# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  _id: ID!
  _access: ID
  company: Company!
  authType: UserAuthType!
  oauthProvider: String
  oauthId: String
  email: String!
  name: String
  role: UserRole!
  inviteStatus: UserInviteStatus!
  createdAt: Date!
  updatedAt: Date!
}

enum UserAuthType {
  Plain
  Google
}

enum UserRole {
  Common
  Manager
  Admin
}

enum UserInviteStatus {
  Pending
  Assigned
}

"""Date custom scalar type"""
scalar Date

type Company {
  _id: ID!
  name: String!
  email: String!
  users: [User!]!
  createdAt: Date!
  updatedAt: Date!
}

type Project {
  _id: ID!
  company: Company!
  title: String!
  accesses: [User!]!
  manager: User!
  createdAt: Date!
  updatedAt: Date!
  taskUpdatedAt: Date
}

type TaskComment {
  _id: ID!
  author: User!
  content: String!
  createdAt: Date!
  updatedAt: Date!
}

type DateRange {
  from: Date
  to: Date
}

type Task {
  _id: ID!
  author: User!
  title: String
  content: String
  project: Project!
  isTopDepth: Boolean!
  children: [Task!]!
  involvedUsers: [User!]!
  comments: [TaskComment!]!
  deadline: DateRange
  status: TaskStatus
  createdAt: Date!
  updatedAt: Date!
}

enum TaskStatus {
  Ready
  OnGoing
  Done
}

type Query {
  project(id: ID!): Project!
  projects: [Project!]!
  projectUsers(id: ID!): [User!]!
  companyUsers: [User!]!
  login(input: LoginInput!): User!
  me: User!
  logout: Boolean!
  task(id: ID!): Task!
  tasksByProjectId(projectId: ID!): [Task!]!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createProject(project: CreateProjectInput!): Project!
  updateProject(project: UpdateProjectInput!): Project!
  deleteProject(id: ID!): ID!
  restoreProject(id: ID!): ID!
  inviteProject(id: ID!, userIds: [ID!]!): Project!
  disinviteProject(id: ID!, userIds: [ID!]!): Project!
  createCompany(company: CreateCompanyInput!): Company!
  inviteUserToCompany(user: CreateUserInput!): Company!
  assignInviteWithPlain(id: ID!, input: AssignPlainUserInput!): User!
  assignInviteWithOAuth(id: ID!): User!
  createTask(task: CreateTaskInput!): Task!
  updateTask(task: UpdateTaskInput!): Task!
  deleteTask(id: ID!): ID!
  restoreTask(id: ID!): ID!
  createTaskComment(comment: CreateTaskCommentInput!): TaskComment!
  updateTaskComment(comment: UpdateTaskCommentInput!): TaskComment!
  deleteTaskComment(id: ID!): ID!
  moveTaskChild(input: MoveTaskChildrenInput!): [Task!]!
}

input CreateProjectInput {
  title: String!
  accesses: [ID!]!
}

input UpdateProjectInput {
  id: String!
  title: String!
}

input CreateCompanyInput {
  name: String!
  email: String!
}

input CreateUserInput {
  email: String!
  role: UserRole!
}

input AssignPlainUserInput {
  name: String!
  password: String!
}

input CreateTaskInput {
  projectId: ID!
  parentTaskId: ID
  sortAfterTaskId: ID
  title: String!
  content: String
  deadline: DateRangeInput
  involvedUserIds: [String!]
}

input DateRangeInput {
  from: Date
  to: Date
}

input UpdateTaskInput {
  id: ID!
  title: String
  content: String
  deadline: DateRangeInput
  involvedUserIds: [String]
  status: TaskStatus
}

input CreateTaskCommentInput {
  taskId: ID!
  content: String!
}

input UpdateTaskCommentInput {
  id: ID!
  content: String!
}

input MoveTaskChildrenInput {
  fromParentId: String
  toParentId: String
  childId: String!
  sortAfterId: String
}